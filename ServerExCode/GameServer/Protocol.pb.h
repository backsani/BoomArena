// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ATTACK;
struct C_ATTACKDefaultTypeInternal;
extern C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_ROOM_DATA;
struct C_ROOM_DATADefaultTypeInternal;
extern C_ROOM_DATADefaultTypeInternal _C_ROOM_DATA_default_instance_;
class C_ROOM_REQUEST;
struct C_ROOM_REQUESTDefaultTypeInternal;
extern C_ROOM_REQUESTDefaultTypeInternal _C_ROOM_REQUEST_default_instance_;
class C_RTT_PING;
struct C_RTT_PINGDefaultTypeInternal;
extern C_RTT_PINGDefaultTypeInternal _C_RTT_PING_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_OBJECT_DAMAGE;
struct S_OBJECT_DAMAGEDefaultTypeInternal;
extern S_OBJECT_DAMAGEDefaultTypeInternal _S_OBJECT_DAMAGE_default_instance_;
class S_OBJECT_DEAD;
struct S_OBJECT_DEADDefaultTypeInternal;
extern S_OBJECT_DEADDefaultTypeInternal _S_OBJECT_DEAD_default_instance_;
class S_OBJECT_SPAWN;
struct S_OBJECT_SPAWNDefaultTypeInternal;
extern S_OBJECT_SPAWNDefaultTypeInternal _S_OBJECT_SPAWN_default_instance_;
class S_ROOM_DATA;
struct S_ROOM_DATADefaultTypeInternal;
extern S_ROOM_DATADefaultTypeInternal _S_ROOM_DATA_default_instance_;
class S_ROOM_RESPONSE;
struct S_ROOM_RESPONSEDefaultTypeInternal;
extern S_ROOM_RESPONSEDefaultTypeInternal _S_ROOM_RESPONSE_default_instance_;
class S_RTT_PONG;
struct S_RTT_PONGDefaultTypeInternal;
extern S_RTT_PONGDefaultTypeInternal _S_RTT_PONG_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ATTACK* Arena::CreateMaybeMessage<::Protocol::C_ATTACK>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_ROOM_DATA* Arena::CreateMaybeMessage<::Protocol::C_ROOM_DATA>(Arena*);
template<> ::Protocol::C_ROOM_REQUEST* Arena::CreateMaybeMessage<::Protocol::C_ROOM_REQUEST>(Arena*);
template<> ::Protocol::C_RTT_PING* Arena::CreateMaybeMessage<::Protocol::C_RTT_PING>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_OBJECT_DAMAGE* Arena::CreateMaybeMessage<::Protocol::S_OBJECT_DAMAGE>(Arena*);
template<> ::Protocol::S_OBJECT_DEAD* Arena::CreateMaybeMessage<::Protocol::S_OBJECT_DEAD>(Arena*);
template<> ::Protocol::S_OBJECT_SPAWN* Arena::CreateMaybeMessage<::Protocol::S_OBJECT_SPAWN>(Arena*);
template<> ::Protocol::S_ROOM_DATA* Arena::CreateMaybeMessage<::Protocol::S_ROOM_DATA>(Arena*);
template<> ::Protocol::S_ROOM_RESPONSE* Arena::CreateMaybeMessage<::Protocol::S_ROOM_RESPONSE>(Arena*);
template<> ::Protocol::S_RTT_PONG* Arena::CreateMaybeMessage<::Protocol::S_RTT_PONG>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginCodeFieldNumber = 1,
  };
  // uint64 loginCode = 1;
  void clear_logincode();
  ::PROTOBUF_NAMESPACE_ID::uint64 logincode() const;
  void set_logincode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logincode() const;
  void _internal_set_logincode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logincode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit constexpr C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_MOVE* New() const final {
    return new C_MOVE();
  }

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_MOVE& from);
  void MergeFrom(const C_MOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 4,
    kRoomCodeFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // .Protocol.Vector3 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Protocol::Vector3& direction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector3* release_direction();
  ::Protocol::Vector3* mutable_direction();
  void set_allocated_direction(::Protocol::Vector3* direction);
  private:
  const ::Protocol::Vector3& _internal_direction() const;
  ::Protocol::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Protocol::Vector3* direction);
  ::Protocol::Vector3* unsafe_arena_release_direction();

  // int32 roomCode = 1;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 objectId = 2;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Protocol.GameObjectState state = 3;
  void clear_state();
  ::Protocol::GameObjectState state() const;
  void set_state(::Protocol::GameObjectState value);
  private:
  ::Protocol::GameObjectState _internal_state() const;
  void _internal_set_state(::Protocol::GameObjectState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector3* direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_DATA) */ {
 public:
  inline C_ROOM_DATA() : C_ROOM_DATA(nullptr) {}
  ~C_ROOM_DATA() override;
  explicit constexpr C_ROOM_DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_DATA(const C_ROOM_DATA& from);
  C_ROOM_DATA(C_ROOM_DATA&& from) noexcept
    : C_ROOM_DATA() {
    *this = ::std::move(from);
  }

  inline C_ROOM_DATA& operator=(const C_ROOM_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_DATA& operator=(C_ROOM_DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_DATA* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_DATA*>(
               &_C_ROOM_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ROOM_DATA& a, C_ROOM_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_DATA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_DATA* New() const final {
    return new C_ROOM_DATA();
  }

  C_ROOM_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_DATA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_DATA& from);
  void MergeFrom(const C_ROOM_DATA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_DATA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_DATA";
  }
  protected:
  explicit C_ROOM_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldNumber = 1,
  };
  // uint32 dummy = 1;
  void clear_dummy();
  ::PROTOBUF_NAMESPACE_ID::uint32 dummy() const;
  void set_dummy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dummy() const;
  void _internal_set_dummy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dummy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_REQUEST) */ {
 public:
  inline C_ROOM_REQUEST() : C_ROOM_REQUEST(nullptr) {}
  ~C_ROOM_REQUEST() override;
  explicit constexpr C_ROOM_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_REQUEST(const C_ROOM_REQUEST& from);
  C_ROOM_REQUEST(C_ROOM_REQUEST&& from) noexcept
    : C_ROOM_REQUEST() {
    *this = ::std::move(from);
  }

  inline C_ROOM_REQUEST& operator=(const C_ROOM_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_REQUEST& operator=(C_ROOM_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_REQUEST* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_REQUEST*>(
               &_C_ROOM_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_ROOM_REQUEST& a, C_ROOM_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_REQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_REQUEST* New() const final {
    return new C_ROOM_REQUEST();
  }

  C_ROOM_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_REQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_REQUEST& from);
  void MergeFrom(const C_ROOM_REQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_REQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_REQUEST";
  }
  protected:
  explicit C_ROOM_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
  };
  // int32 roomCode = 1;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ATTACK) */ {
 public:
  inline C_ATTACK() : C_ATTACK(nullptr) {}
  ~C_ATTACK() override;
  explicit constexpr C_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK(const C_ATTACK& from);
  C_ATTACK(C_ATTACK&& from) noexcept
    : C_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_ATTACK& operator=(const C_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK& operator=(C_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK*>(
               &_C_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_ATTACK& a, C_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ATTACK* New() const final {
    return new C_ATTACK();
  }

  C_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ATTACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ATTACK& from);
  void MergeFrom(const C_ATTACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ATTACK";
  }
  protected:
  explicit C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 4,
    kRoomCodeFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
  };
  // .Protocol.Vector3 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Protocol::Vector3& direction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector3* release_direction();
  ::Protocol::Vector3* mutable_direction();
  void set_allocated_direction(::Protocol::Vector3* direction);
  private:
  const ::Protocol::Vector3& _internal_direction() const;
  ::Protocol::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Protocol::Vector3* direction);
  ::Protocol::Vector3* unsafe_arena_release_direction();

  // int32 roomCode = 1;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 objectId = 2;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Protocol.ObjectType objectType = 3;
  void clear_objecttype();
  ::Protocol::ObjectType objecttype() const;
  void set_objecttype(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_objecttype() const;
  void _internal_set_objecttype(::Protocol::ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector3* direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  int objecttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_RTT_PING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_RTT_PING) */ {
 public:
  inline C_RTT_PING() : C_RTT_PING(nullptr) {}
  ~C_RTT_PING() override;
  explicit constexpr C_RTT_PING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_RTT_PING(const C_RTT_PING& from);
  C_RTT_PING(C_RTT_PING&& from) noexcept
    : C_RTT_PING() {
    *this = ::std::move(from);
  }

  inline C_RTT_PING& operator=(const C_RTT_PING& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_RTT_PING& operator=(C_RTT_PING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_RTT_PING& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_RTT_PING* internal_default_instance() {
    return reinterpret_cast<const C_RTT_PING*>(
               &_C_RTT_PING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_RTT_PING& a, C_RTT_PING& b) {
    a.Swap(&b);
  }
  inline void Swap(C_RTT_PING* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_RTT_PING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_RTT_PING* New() const final {
    return new C_RTT_PING();
  }

  C_RTT_PING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_RTT_PING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_RTT_PING& from);
  void MergeFrom(const C_RTT_PING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_RTT_PING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_RTT_PING";
  }
  protected:
  explicit C_RTT_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimeFieldNumber = 1,
  };
  // int64 client_time = 1;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_RTT_PING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RTT_PONG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RTT_PONG) */ {
 public:
  inline S_RTT_PONG() : S_RTT_PONG(nullptr) {}
  ~S_RTT_PONG() override;
  explicit constexpr S_RTT_PONG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RTT_PONG(const S_RTT_PONG& from);
  S_RTT_PONG(S_RTT_PONG&& from) noexcept
    : S_RTT_PONG() {
    *this = ::std::move(from);
  }

  inline S_RTT_PONG& operator=(const S_RTT_PONG& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RTT_PONG& operator=(S_RTT_PONG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RTT_PONG& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RTT_PONG* internal_default_instance() {
    return reinterpret_cast<const S_RTT_PONG*>(
               &_S_RTT_PONG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_RTT_PONG& a, S_RTT_PONG& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RTT_PONG* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RTT_PONG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_RTT_PONG* New() const final {
    return new S_RTT_PONG();
  }

  S_RTT_PONG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_RTT_PONG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_RTT_PONG& from);
  void MergeFrom(const S_RTT_PONG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RTT_PONG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RTT_PONG";
  }
  protected:
  explicit S_RTT_PONG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimeFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // int64 client_time = 1;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_time = 2;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_RTT_PONG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kLoginAcceptFieldNumber = 2,
  };
  // uint64 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool loginAccept = 2;
  void clear_loginaccept();
  bool loginaccept() const;
  void set_loginaccept(bool value);
  private:
  bool _internal_loginaccept() const;
  void _internal_set_loginaccept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  bool loginaccept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_DATA) */ {
 public:
  inline S_ROOM_DATA() : S_ROOM_DATA(nullptr) {}
  ~S_ROOM_DATA() override;
  explicit constexpr S_ROOM_DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_DATA(const S_ROOM_DATA& from);
  S_ROOM_DATA(S_ROOM_DATA&& from) noexcept
    : S_ROOM_DATA() {
    *this = ::std::move(from);
  }

  inline S_ROOM_DATA& operator=(const S_ROOM_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_DATA& operator=(S_ROOM_DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_DATA* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_DATA*>(
               &_S_ROOM_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_ROOM_DATA& a, S_ROOM_DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_DATA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_DATA* New() const final {
    return new S_ROOM_DATA();
  }

  S_ROOM_DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_DATA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_DATA& from);
  void MergeFrom(const S_ROOM_DATA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_DATA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_DATA";
  }
  protected:
  explicit S_ROOM_DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomDataFieldNumber = 1,
  };
  // repeated .Protocol.RoomData roomData = 1;
  int roomdata_size() const;
  private:
  int _internal_roomdata_size() const;
  public:
  void clear_roomdata();
  ::Protocol::RoomData* mutable_roomdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomData >*
      mutable_roomdata();
  private:
  const ::Protocol::RoomData& _internal_roomdata(int index) const;
  ::Protocol::RoomData* _internal_add_roomdata();
  public:
  const ::Protocol::RoomData& roomdata(int index) const;
  ::Protocol::RoomData* add_roomdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomData >&
      roomdata() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomData > roomdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_RESPONSE) */ {
 public:
  inline S_ROOM_RESPONSE() : S_ROOM_RESPONSE(nullptr) {}
  ~S_ROOM_RESPONSE() override;
  explicit constexpr S_ROOM_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_RESPONSE(const S_ROOM_RESPONSE& from);
  S_ROOM_RESPONSE(S_ROOM_RESPONSE&& from) noexcept
    : S_ROOM_RESPONSE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_RESPONSE& operator=(const S_ROOM_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_RESPONSE& operator=(S_ROOM_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_RESPONSE*>(
               &_S_ROOM_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_ROOM_RESPONSE& a, S_ROOM_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_RESPONSE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_RESPONSE* New() const final {
    return new S_ROOM_RESPONSE();
  }

  S_ROOM_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_RESPONSE& from);
  void MergeFrom(const S_ROOM_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_RESPONSE";
  }
  protected:
  explicit S_ROOM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 4,
    kRoomAcceptFieldNumber = 1,
    kRoomCodeFieldNumber = 2,
    kPlayerObjectIdFieldNumber = 3,
  };
  // repeated .Protocol.ObjectData objectData = 4;
  int objectdata_size() const;
  private:
  int _internal_objectdata_size() const;
  public:
  void clear_objectdata();
  ::Protocol::ObjectData* mutable_objectdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectData >*
      mutable_objectdata();
  private:
  const ::Protocol::ObjectData& _internal_objectdata(int index) const;
  ::Protocol::ObjectData* _internal_add_objectdata();
  public:
  const ::Protocol::ObjectData& objectdata(int index) const;
  ::Protocol::ObjectData* add_objectdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectData >&
      objectdata() const;

  // bool roomAccept = 1;
  void clear_roomaccept();
  bool roomaccept() const;
  void set_roomaccept(bool value);
  private:
  bool _internal_roomaccept() const;
  void _internal_set_roomaccept(bool value);
  public:

  // int32 roomCode = 2;
  void clear_roomcode();
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode() const;
  void set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomcode() const;
  void _internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 playerObjectId = 3;
  void clear_playerobjectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerobjectid() const;
  void set_playerobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerobjectid() const;
  void _internal_set_playerobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectData > objectdata_;
  bool roomaccept_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit constexpr S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MOVE* New() const final {
    return new S_MOVE();
  }

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MOVE& from);
  void MergeFrom(const S_MOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // uint32 objectId = 1;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Protocol.GameObjectState state = 2;
  void clear_state();
  ::Protocol::GameObjectState state() const;
  void set_state(::Protocol::GameObjectState value);
  private:
  ::Protocol::GameObjectState _internal_state() const;
  void _internal_set_state(::Protocol::GameObjectState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector3* position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJECT_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJECT_SPAWN) */ {
 public:
  inline S_OBJECT_SPAWN() : S_OBJECT_SPAWN(nullptr) {}
  ~S_OBJECT_SPAWN() override;
  explicit constexpr S_OBJECT_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJECT_SPAWN(const S_OBJECT_SPAWN& from);
  S_OBJECT_SPAWN(S_OBJECT_SPAWN&& from) noexcept
    : S_OBJECT_SPAWN() {
    *this = ::std::move(from);
  }

  inline S_OBJECT_SPAWN& operator=(const S_OBJECT_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJECT_SPAWN& operator=(S_OBJECT_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJECT_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJECT_SPAWN* internal_default_instance() {
    return reinterpret_cast<const S_OBJECT_SPAWN*>(
               &_S_OBJECT_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_OBJECT_SPAWN& a, S_OBJECT_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJECT_SPAWN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJECT_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJECT_SPAWN* New() const final {
    return new S_OBJECT_SPAWN();
  }

  S_OBJECT_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJECT_SPAWN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJECT_SPAWN& from);
  void MergeFrom(const S_OBJECT_SPAWN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJECT_SPAWN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJECT_SPAWN";
  }
  protected:
  explicit S_OBJECT_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 1,
    kSpawnTimeFieldNumber = 2,
  };
  // .Protocol.ObjectData objectData = 1;
  bool has_objectdata() const;
  private:
  bool _internal_has_objectdata() const;
  public:
  void clear_objectdata();
  const ::Protocol::ObjectData& objectdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ObjectData* release_objectdata();
  ::Protocol::ObjectData* mutable_objectdata();
  void set_allocated_objectdata(::Protocol::ObjectData* objectdata);
  private:
  const ::Protocol::ObjectData& _internal_objectdata() const;
  ::Protocol::ObjectData* _internal_mutable_objectdata();
  public:
  void unsafe_arena_set_allocated_objectdata(
      ::Protocol::ObjectData* objectdata);
  ::Protocol::ObjectData* unsafe_arena_release_objectdata();

  // int64 spawnTime = 2;
  void clear_spawntime();
  ::PROTOBUF_NAMESPACE_ID::int64 spawntime() const;
  void set_spawntime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_spawntime() const;
  void _internal_set_spawntime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJECT_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ObjectData* objectdata_;
  ::PROTOBUF_NAMESPACE_ID::int64 spawntime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJECT_DEAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJECT_DEAD) */ {
 public:
  inline S_OBJECT_DEAD() : S_OBJECT_DEAD(nullptr) {}
  ~S_OBJECT_DEAD() override;
  explicit constexpr S_OBJECT_DEAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJECT_DEAD(const S_OBJECT_DEAD& from);
  S_OBJECT_DEAD(S_OBJECT_DEAD&& from) noexcept
    : S_OBJECT_DEAD() {
    *this = ::std::move(from);
  }

  inline S_OBJECT_DEAD& operator=(const S_OBJECT_DEAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJECT_DEAD& operator=(S_OBJECT_DEAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJECT_DEAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJECT_DEAD* internal_default_instance() {
    return reinterpret_cast<const S_OBJECT_DEAD*>(
               &_S_OBJECT_DEAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_OBJECT_DEAD& a, S_OBJECT_DEAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJECT_DEAD* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJECT_DEAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJECT_DEAD* New() const final {
    return new S_OBJECT_DEAD();
  }

  S_OBJECT_DEAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJECT_DEAD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJECT_DEAD& from);
  void MergeFrom(const S_OBJECT_DEAD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJECT_DEAD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJECT_DEAD";
  }
  protected:
  explicit S_OBJECT_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // uint32 objectId = 1;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Protocol.GameObjectState state = 2;
  void clear_state();
  ::Protocol::GameObjectState state() const;
  void set_state(::Protocol::GameObjectState value);
  private:
  ::Protocol::GameObjectState _internal_state() const;
  void _internal_set_state(::Protocol::GameObjectState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJECT_DEAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJECT_DAMAGE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJECT_DAMAGE) */ {
 public:
  inline S_OBJECT_DAMAGE() : S_OBJECT_DAMAGE(nullptr) {}
  ~S_OBJECT_DAMAGE() override;
  explicit constexpr S_OBJECT_DAMAGE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJECT_DAMAGE(const S_OBJECT_DAMAGE& from);
  S_OBJECT_DAMAGE(S_OBJECT_DAMAGE&& from) noexcept
    : S_OBJECT_DAMAGE() {
    *this = ::std::move(from);
  }

  inline S_OBJECT_DAMAGE& operator=(const S_OBJECT_DAMAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJECT_DAMAGE& operator=(S_OBJECT_DAMAGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJECT_DAMAGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJECT_DAMAGE* internal_default_instance() {
    return reinterpret_cast<const S_OBJECT_DAMAGE*>(
               &_S_OBJECT_DAMAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_OBJECT_DAMAGE& a, S_OBJECT_DAMAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJECT_DAMAGE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJECT_DAMAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJECT_DAMAGE* New() const final {
    return new S_OBJECT_DAMAGE();
  }

  S_OBJECT_DAMAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJECT_DAMAGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJECT_DAMAGE& from);
  void MergeFrom(const S_OBJECT_DAMAGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJECT_DAMAGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJECT_DAMAGE";
  }
  protected:
  explicit S_OBJECT_DAMAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint32 objectId = 1;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float hp = 2;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJECT_DAMAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  float hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// uint64 loginCode = 1;
inline void C_LOGIN::clear_logincode() {
  logincode_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_LOGIN::_internal_logincode() const {
  return logincode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_LOGIN::logincode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.loginCode)
  return _internal_logincode();
}
inline void C_LOGIN::_internal_set_logincode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  logincode_ = value;
}
inline void C_LOGIN::set_logincode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logincode(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.loginCode)
}

// -------------------------------------------------------------------

// C_MOVE

// int32 roomCode = 1;
inline void C_MOVE::clear_roomcode() {
  roomcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_MOVE::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_MOVE::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.roomCode)
  return _internal_roomcode();
}
inline void C_MOVE::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcode_ = value;
}
inline void C_MOVE::set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.roomCode)
}

// uint32 objectId = 2;
inline void C_MOVE::clear_objectid() {
  objectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.objectId)
  return _internal_objectid();
}
inline void C_MOVE::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objectid_ = value;
}
inline void C_MOVE::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.objectId)
}

// .Protocol.GameObjectState state = 3;
inline void C_MOVE::clear_state() {
  state_ = 0;
}
inline ::Protocol::GameObjectState C_MOVE::_internal_state() const {
  return static_cast< ::Protocol::GameObjectState >(state_);
}
inline ::Protocol::GameObjectState C_MOVE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.state)
  return _internal_state();
}
inline void C_MOVE::_internal_set_state(::Protocol::GameObjectState value) {
  
  state_ = value;
}
inline void C_MOVE::set_state(::Protocol::GameObjectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.state)
}

// .Protocol.Vector3 direction = 4;
inline bool C_MOVE::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool C_MOVE::has_direction() const {
  return _internal_has_direction();
}
inline const ::Protocol::Vector3& C_MOVE::_internal_direction() const {
  const ::Protocol::Vector3* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_MOVE::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.direction)
  return _internal_direction();
}
inline void C_MOVE::unsafe_arena_set_allocated_direction(
    ::Protocol::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.direction)
}
inline ::Protocol::Vector3* C_MOVE::release_direction() {
  
  ::Protocol::Vector3* temp = direction_;
  direction_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector3* C_MOVE::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.direction)
  
  ::Protocol::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_MOVE::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Protocol::Vector3* C_MOVE::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.direction)
  return _internal_mutable_direction();
}
inline void C_MOVE::set_allocated_direction(::Protocol::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.direction)
}

// -------------------------------------------------------------------

// C_ROOM_DATA

// uint32 dummy = 1;
inline void C_ROOM_DATA::clear_dummy() {
  dummy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ROOM_DATA::_internal_dummy() const {
  return dummy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ROOM_DATA::dummy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_DATA.dummy)
  return _internal_dummy();
}
inline void C_ROOM_DATA::_internal_set_dummy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dummy_ = value;
}
inline void C_ROOM_DATA::set_dummy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_DATA.dummy)
}

// -------------------------------------------------------------------

// C_ROOM_REQUEST

// int32 roomCode = 1;
inline void C_ROOM_REQUEST::clear_roomcode() {
  roomcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_REQUEST::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_REQUEST::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_REQUEST.roomCode)
  return _internal_roomcode();
}
inline void C_ROOM_REQUEST::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcode_ = value;
}
inline void C_ROOM_REQUEST::set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_REQUEST.roomCode)
}

// -------------------------------------------------------------------

// C_ATTACK

// int32 roomCode = 1;
inline void C_ATTACK::clear_roomcode() {
  roomcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ATTACK::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ATTACK::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.roomCode)
  return _internal_roomcode();
}
inline void C_ATTACK::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcode_ = value;
}
inline void C_ATTACK::set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.roomCode)
}

// uint32 objectId = 2;
inline void C_ATTACK::clear_objectid() {
  objectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.objectId)
  return _internal_objectid();
}
inline void C_ATTACK::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objectid_ = value;
}
inline void C_ATTACK::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.objectId)
}

// .Protocol.ObjectType objectType = 3;
inline void C_ATTACK::clear_objecttype() {
  objecttype_ = 0;
}
inline ::Protocol::ObjectType C_ATTACK::_internal_objecttype() const {
  return static_cast< ::Protocol::ObjectType >(objecttype_);
}
inline ::Protocol::ObjectType C_ATTACK::objecttype() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.objectType)
  return _internal_objecttype();
}
inline void C_ATTACK::_internal_set_objecttype(::Protocol::ObjectType value) {
  
  objecttype_ = value;
}
inline void C_ATTACK::set_objecttype(::Protocol::ObjectType value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.objectType)
}

// .Protocol.Vector3 direction = 4;
inline bool C_ATTACK::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool C_ATTACK::has_direction() const {
  return _internal_has_direction();
}
inline const ::Protocol::Vector3& C_ATTACK::_internal_direction() const {
  const ::Protocol::Vector3* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_ATTACK::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.direction)
  return _internal_direction();
}
inline void C_ATTACK::unsafe_arena_set_allocated_direction(
    ::Protocol::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK.direction)
}
inline ::Protocol::Vector3* C_ATTACK::release_direction() {
  
  ::Protocol::Vector3* temp = direction_;
  direction_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector3* C_ATTACK::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK.direction)
  
  ::Protocol::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_ATTACK::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Protocol::Vector3* C_ATTACK::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK.direction)
  return _internal_mutable_direction();
}
inline void C_ATTACK::set_allocated_direction(::Protocol::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK.direction)
}

// -------------------------------------------------------------------

// C_RTT_PING

// int64 client_time = 1;
inline void C_RTT_PING::clear_client_time() {
  client_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_RTT_PING::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_RTT_PING::client_time() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RTT_PING.client_time)
  return _internal_client_time();
}
inline void C_RTT_PING::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_time_ = value;
}
inline void C_RTT_PING::set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RTT_PING.client_time)
}

// -------------------------------------------------------------------

// S_RTT_PONG

// int64 client_time = 1;
inline void S_RTT_PONG::clear_client_time() {
  client_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_RTT_PONG::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_RTT_PONG::client_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RTT_PONG.client_time)
  return _internal_client_time();
}
inline void S_RTT_PONG::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_time_ = value;
}
inline void S_RTT_PONG::set_client_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RTT_PONG.client_time)
}

// int64 server_time = 2;
inline void S_RTT_PONG::clear_server_time() {
  server_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_RTT_PONG::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_RTT_PONG::server_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RTT_PONG.server_time)
  return _internal_server_time();
}
inline void S_RTT_PONG::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_time_ = value;
}
inline void S_RTT_PONG::set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RTT_PONG.server_time)
}

// -------------------------------------------------------------------

// S_LOGIN

// uint64 gameId = 1;
inline void S_LOGIN::clear_gameid() {
  gameid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_LOGIN::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_LOGIN::gameid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.gameId)
  return _internal_gameid();
}
inline void S_LOGIN::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gameid_ = value;
}
inline void S_LOGIN::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.gameId)
}

// bool loginAccept = 2;
inline void S_LOGIN::clear_loginaccept() {
  loginaccept_ = false;
}
inline bool S_LOGIN::_internal_loginaccept() const {
  return loginaccept_;
}
inline bool S_LOGIN::loginaccept() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.loginAccept)
  return _internal_loginaccept();
}
inline void S_LOGIN::_internal_set_loginaccept(bool value) {
  
  loginaccept_ = value;
}
inline void S_LOGIN::set_loginaccept(bool value) {
  _internal_set_loginaccept(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.loginAccept)
}

// -------------------------------------------------------------------

// S_ROOM_DATA

// repeated .Protocol.RoomData roomData = 1;
inline int S_ROOM_DATA::_internal_roomdata_size() const {
  return roomdata_.size();
}
inline int S_ROOM_DATA::roomdata_size() const {
  return _internal_roomdata_size();
}
inline ::Protocol::RoomData* S_ROOM_DATA::mutable_roomdata(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_DATA.roomData)
  return roomdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomData >*
S_ROOM_DATA::mutable_roomdata() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOM_DATA.roomData)
  return &roomdata_;
}
inline const ::Protocol::RoomData& S_ROOM_DATA::_internal_roomdata(int index) const {
  return roomdata_.Get(index);
}
inline const ::Protocol::RoomData& S_ROOM_DATA::roomdata(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_DATA.roomData)
  return _internal_roomdata(index);
}
inline ::Protocol::RoomData* S_ROOM_DATA::_internal_add_roomdata() {
  return roomdata_.Add();
}
inline ::Protocol::RoomData* S_ROOM_DATA::add_roomdata() {
  // @@protoc_insertion_point(field_add:Protocol.S_ROOM_DATA.roomData)
  return _internal_add_roomdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomData >&
S_ROOM_DATA::roomdata() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOM_DATA.roomData)
  return roomdata_;
}

// -------------------------------------------------------------------

// S_ROOM_RESPONSE

// bool roomAccept = 1;
inline void S_ROOM_RESPONSE::clear_roomaccept() {
  roomaccept_ = false;
}
inline bool S_ROOM_RESPONSE::_internal_roomaccept() const {
  return roomaccept_;
}
inline bool S_ROOM_RESPONSE::roomaccept() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_RESPONSE.roomAccept)
  return _internal_roomaccept();
}
inline void S_ROOM_RESPONSE::_internal_set_roomaccept(bool value) {
  
  roomaccept_ = value;
}
inline void S_ROOM_RESPONSE::set_roomaccept(bool value) {
  _internal_set_roomaccept(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_RESPONSE.roomAccept)
}

// int32 roomCode = 2;
inline void S_ROOM_RESPONSE::clear_roomcode() {
  roomcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ROOM_RESPONSE::_internal_roomcode() const {
  return roomcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ROOM_RESPONSE::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_RESPONSE.roomCode)
  return _internal_roomcode();
}
inline void S_ROOM_RESPONSE::_internal_set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcode_ = value;
}
inline void S_ROOM_RESPONSE::set_roomcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomcode(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_RESPONSE.roomCode)
}

// uint32 playerObjectId = 3;
inline void S_ROOM_RESPONSE::clear_playerobjectid() {
  playerobjectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ROOM_RESPONSE::_internal_playerobjectid() const {
  return playerobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ROOM_RESPONSE::playerobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_RESPONSE.playerObjectId)
  return _internal_playerobjectid();
}
inline void S_ROOM_RESPONSE::_internal_set_playerobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerobjectid_ = value;
}
inline void S_ROOM_RESPONSE::set_playerobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_RESPONSE.playerObjectId)
}

// repeated .Protocol.ObjectData objectData = 4;
inline int S_ROOM_RESPONSE::_internal_objectdata_size() const {
  return objectdata_.size();
}
inline int S_ROOM_RESPONSE::objectdata_size() const {
  return _internal_objectdata_size();
}
inline ::Protocol::ObjectData* S_ROOM_RESPONSE::mutable_objectdata(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_RESPONSE.objectData)
  return objectdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectData >*
S_ROOM_RESPONSE::mutable_objectdata() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOM_RESPONSE.objectData)
  return &objectdata_;
}
inline const ::Protocol::ObjectData& S_ROOM_RESPONSE::_internal_objectdata(int index) const {
  return objectdata_.Get(index);
}
inline const ::Protocol::ObjectData& S_ROOM_RESPONSE::objectdata(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_RESPONSE.objectData)
  return _internal_objectdata(index);
}
inline ::Protocol::ObjectData* S_ROOM_RESPONSE::_internal_add_objectdata() {
  return objectdata_.Add();
}
inline ::Protocol::ObjectData* S_ROOM_RESPONSE::add_objectdata() {
  // @@protoc_insertion_point(field_add:Protocol.S_ROOM_RESPONSE.objectData)
  return _internal_add_objectdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectData >&
S_ROOM_RESPONSE::objectdata() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOM_RESPONSE.objectData)
  return objectdata_;
}

// -------------------------------------------------------------------

// S_MOVE

// uint32 objectId = 1;
inline void S_MOVE::clear_objectid() {
  objectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_MOVE::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_MOVE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.objectId)
  return _internal_objectid();
}
inline void S_MOVE::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objectid_ = value;
}
inline void S_MOVE::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.objectId)
}

// .Protocol.GameObjectState state = 2;
inline void S_MOVE::clear_state() {
  state_ = 0;
}
inline ::Protocol::GameObjectState S_MOVE::_internal_state() const {
  return static_cast< ::Protocol::GameObjectState >(state_);
}
inline ::Protocol::GameObjectState S_MOVE::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.state)
  return _internal_state();
}
inline void S_MOVE::_internal_set_state(::Protocol::GameObjectState value) {
  
  state_ = value;
}
inline void S_MOVE::set_state(::Protocol::GameObjectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.state)
}

// .Protocol.Vector3 position = 3;
inline bool S_MOVE::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool S_MOVE::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_MOVE::_internal_position() const {
  const ::Protocol::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_MOVE::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.position)
  return _internal_position();
}
inline void S_MOVE::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.position)
}
inline ::Protocol::Vector3* S_MOVE::release_position() {
  
  ::Protocol::Vector3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector3* S_MOVE::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.position)
  
  ::Protocol::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_MOVE::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::Vector3* S_MOVE::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.position)
  return _internal_mutable_position();
}
inline void S_MOVE::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.position)
}

// -------------------------------------------------------------------

// S_OBJECT_SPAWN

// .Protocol.ObjectData objectData = 1;
inline bool S_OBJECT_SPAWN::_internal_has_objectdata() const {
  return this != internal_default_instance() && objectdata_ != nullptr;
}
inline bool S_OBJECT_SPAWN::has_objectdata() const {
  return _internal_has_objectdata();
}
inline const ::Protocol::ObjectData& S_OBJECT_SPAWN::_internal_objectdata() const {
  const ::Protocol::ObjectData* p = objectdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectData&>(
      ::Protocol::_ObjectData_default_instance_);
}
inline const ::Protocol::ObjectData& S_OBJECT_SPAWN::objectdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_SPAWN.objectData)
  return _internal_objectdata();
}
inline void S_OBJECT_SPAWN::unsafe_arena_set_allocated_objectdata(
    ::Protocol::ObjectData* objectdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectdata_);
  }
  objectdata_ = objectdata;
  if (objectdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_OBJECT_SPAWN.objectData)
}
inline ::Protocol::ObjectData* S_OBJECT_SPAWN::release_objectdata() {
  
  ::Protocol::ObjectData* temp = objectdata_;
  objectdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ObjectData* S_OBJECT_SPAWN::unsafe_arena_release_objectdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_OBJECT_SPAWN.objectData)
  
  ::Protocol::ObjectData* temp = objectdata_;
  objectdata_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectData* S_OBJECT_SPAWN::_internal_mutable_objectdata() {
  
  if (objectdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectData>(GetArenaForAllocation());
    objectdata_ = p;
  }
  return objectdata_;
}
inline ::Protocol::ObjectData* S_OBJECT_SPAWN::mutable_objectdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OBJECT_SPAWN.objectData)
  return _internal_mutable_objectdata();
}
inline void S_OBJECT_SPAWN::set_allocated_objectdata(::Protocol::ObjectData* objectdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectdata_);
  }
  if (objectdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectdata));
    if (message_arena != submessage_arena) {
      objectdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectdata, submessage_arena);
    }
    
  } else {
    
  }
  objectdata_ = objectdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_OBJECT_SPAWN.objectData)
}

// int64 spawnTime = 2;
inline void S_OBJECT_SPAWN::clear_spawntime() {
  spawntime_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OBJECT_SPAWN::_internal_spawntime() const {
  return spawntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OBJECT_SPAWN::spawntime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_SPAWN.spawnTime)
  return _internal_spawntime();
}
inline void S_OBJECT_SPAWN::_internal_set_spawntime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  spawntime_ = value;
}
inline void S_OBJECT_SPAWN::set_spawntime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_spawntime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJECT_SPAWN.spawnTime)
}

// -------------------------------------------------------------------

// S_OBJECT_DEAD

// uint32 objectId = 1;
inline void S_OBJECT_DEAD::clear_objectid() {
  objectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJECT_DEAD::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJECT_DEAD::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_DEAD.objectId)
  return _internal_objectid();
}
inline void S_OBJECT_DEAD::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objectid_ = value;
}
inline void S_OBJECT_DEAD::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJECT_DEAD.objectId)
}

// .Protocol.GameObjectState state = 2;
inline void S_OBJECT_DEAD::clear_state() {
  state_ = 0;
}
inline ::Protocol::GameObjectState S_OBJECT_DEAD::_internal_state() const {
  return static_cast< ::Protocol::GameObjectState >(state_);
}
inline ::Protocol::GameObjectState S_OBJECT_DEAD::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_DEAD.state)
  return _internal_state();
}
inline void S_OBJECT_DEAD::_internal_set_state(::Protocol::GameObjectState value) {
  
  state_ = value;
}
inline void S_OBJECT_DEAD::set_state(::Protocol::GameObjectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJECT_DEAD.state)
}

// -------------------------------------------------------------------

// S_OBJECT_DAMAGE

// uint32 objectId = 1;
inline void S_OBJECT_DAMAGE::clear_objectid() {
  objectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJECT_DAMAGE::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJECT_DAMAGE::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_DAMAGE.objectId)
  return _internal_objectid();
}
inline void S_OBJECT_DAMAGE::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objectid_ = value;
}
inline void S_OBJECT_DAMAGE::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJECT_DAMAGE.objectId)
}

// float hp = 2;
inline void S_OBJECT_DAMAGE::clear_hp() {
  hp_ = 0;
}
inline float S_OBJECT_DAMAGE::_internal_hp() const {
  return hp_;
}
inline float S_OBJECT_DAMAGE::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECT_DAMAGE.hp)
  return _internal_hp();
}
inline void S_OBJECT_DAMAGE::_internal_set_hp(float value) {
  
  hp_ = value;
}
inline void S_OBJECT_DAMAGE::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJECT_DAMAGE.hp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
